{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","italic","fontStyle","searchValue","fontSize","table","minWidth","homeImage","padding1","padding2","SearchAppBar","React","useState","input","setInput","classes","filter","houseList","city","toLowerCase","indexOf","className","AppBar","Toolbar","Typography","variant","noWrap","onChange","e","target","value","console","log","InputBase","placeholder","inputProps","length","TableBody","map","Detail","index","TableRow","TableCell","price","address","postcode","src","picture","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2ec19bd.chunk.js","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n//import styles from './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport houseList from './HouseList.json';\n\nconst useStyles = makeStyles((theme) => ({      //Styling used throughout the Front-End\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '50ch',\n    },\n  },\n  italic: {\n    fontStyle: 'italic',\n    color: 'grey',\n    paddingLeft: '30px'\n  },\n  searchValue:{\n    fontSize: 25,\n    paddingLeft: '25px'\n  },\n  table: {\n    minWidth: 850,\n  },\n  homeImage: {\n    paddingLeft: 400,\n    width: 300,\n    height: 200,\n  },\n  padding1: {\n    fontSize: 15,\n    paddingLeft: 150,\n  },\n  padding2: {\n    fontSize: 15,\n    paddingLeft: 250,\n  },\n}));\n\n\nexport default function SearchAppBar() {\n\n  const [input, setInput] = React.useState();     //Allows the software to temperarally store the users search input \n  \n  const classes = useStyles();\n  \n  const handleChange = (e) => {                   \n    setInput(e.target.value)                      //sets the users search input as the variable \"input\" to filter out houses\n    console.log(input)\n  }\n\n  const filter = houseList.filter(search => {     \n    if(!input){                                   //Prevents the filter algorithm from running if there is no input\n      return houseList\n    } else {\n      return search.city.toLowerCase().indexOf(input.toLowerCase()) !== -1;\n    }                                             // Returns Houses from \"houseList\" where the city matches their search. \n  });                                             // Capitals do not effect this search.\n\n  \n  \n  return (                                        \n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Asset Insight Tester\n          </Typography>\n          \n          <form className={classes.search} onChange={handleChange}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search City…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }} \n              inputProps={{ 'aria-label': 'search' }} \n            />\n          </form>\n        </Toolbar>\n      </AppBar>\n      \n\n      <div>\n        <h1 className={classes.searchValue}>Searching For: <text className={classes.italic}>{input}</text></h1>\n        <p className={classes.italic}>Results found: <text>{filter.length}</text></p> \n      </div>\n      <div>\n        <TableBody>\n          {filter.map((Detail, index) => {\n            return ( \n              <TableRow>\n                <TableCell className={classes.padding1}>£{Detail.price}</TableCell>\n                <TableCell className={classes.padding2}><p>{Detail.address}</p><p>{Detail.city}</p><p>{Detail.postcode}</p></TableCell>\n                <TableCell >\n                  <img\n                  src={Detail.picture}\n                  alt=\"\"\n                  className = {classes.homeImage}\n                  />\n                  </TableCell>\n              </TableRow>\n            )\n        })}\n        </TableBody>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}